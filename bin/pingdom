#!/usr/bin/env bash
set -euo pipefail

BASE_DIR=$(dirname $(readlink -f $0))/..
PINGDOM=https://api.pingdom.com/api/3.1
typeset -A TEMPLATE_ARGS
TEMPLATE_ARGS[build]="${BUILD_ID:-user-$USER}"
TEMPLATE_DIR=$BASE_DIR/templates
WORK_DIR=$BASE_DIR/work
SECRETS_FILE=secrets.conf
# We'll use $SED_SEPARATOR as a sed separator since this would not naturally occur
# but, just in case it might, we can make it a configurable option later
SED_SEPARATOR="^"
CURL_VERBOSE=-s

usage() {
  cat<<EOF
$0 <command> [options]

Options:
--debug                Enable debugging output
--token <api-token>    Specify Pingdom API token with Read-Write permission (env PINGDOM_TOKEN)
--secrets <file>       Bash file that will be sourced if present (env SECRETS_FILE=$SECRETS_FILE)
--template <name>      The name of the template (in ./templates) to apply
-a, --template-args <key=value>
                       Specify a template argument substitution parameter
Commands:
get-check <check-id|check-name>
  Get details for a specific check.
get-checks
  Get a listing of all checks.
process-template --template <template> --template-args key=value ...
  Process a template, but do not save.
save-check --template <template> --template-args key=value ...
  Process a template and save it, creating a new one or updating an existing entry by the same check name.

Example:
$0 save-check \
  --template fhir-resource \
  -a name=production-dstu2-medication-statement \
  -a host=api.va.gov \
  -a url="/services/fhir/v0/dstu2/MedicationStatement?patient=1011537977V693883" \
  -a authorization_token="\$ARGONAUT_TOKEN" \
  -a integrationids_csv="\$HEALTH_APIS_SLACK_ID"


${1:-}

EOF
  exit 1
}

initialize() {
  if [ -d $WORK_DIR ]; then rm -rf $WORK_DIR; fi
  mkdir -p $WORK_DIR
}

fail() {
  echo -e "$1" > /dev/stderr
  exit 1
}

isDebug() {
  if [ "${DEBUG:-false}" == true ]; then return 0; fi
  return 1
}

processCommandLine() {
  local args
  if ! args=$(getopt -n "application" \
    -l "debug,token:,secrets:,template:,template-arg:" \
    -o "a:" -- "$@")
  then
    usage
  fi
  eval set -- "$args"
  while true
  do
    case "$1" in
      --debug) DEBUG=true;;
      --token) PINGDOM_TOKEN="$2";;
      --secrets) SECRETS_FILE="$2";;
      --template) TEMPLATE_NAME="$2";;
      -a|--template-arg) addTemplateArg "$2";;
      --) shift; break;;
    esac
    shift
  done
  if isDebug; then set -x; CURL_VERBOSE=-v; fi
  COMMAND="${1:-}"
  if [ -z "$COMMAND" ]; then usage "Command not specified"; fi
  shift
  if [ -f "$SECRETS_FILE" ]; then . $SECRETS_FILE; fi
  case "$COMMAND" in
    get-checks) getChecks;;
    get-check) getCheck "${1:-}";;
    process-template) processTemplate /dev/stdout;;
    save-check) saveCheck;;
    *) usage "Unknown command: $COMMAND";;
  esac
}

addTemplateArg() {
  local nameEqValue="${1:-}"
  if [[ ! "$nameEqValue" =~ ([-a-zA-Z0-9_]+)=(.*) ]]; then usage "Invalid template argument"; fi
  local name="${BASH_REMATCH[1]}"
  local value="${BASH_REMATCH[2]}"
  TEMPLATE_ARGS[$name]="$value"
}

tokenOrDie() {
  if [ -z "${PINGDOM_TOKEN:-}" ]; then usage "Token not specified"; fi
}

templateOrDie() {
  if [ -z "${TEMPLATE_NAME:-}" ]; then usage "Template not specified"; fi
}

curlPingdom() {
  local path="$1"
  tokenOrDie
  shift
  local output=$(mktemp -p $WORK_DIR)
  local status
  if ! status=$(curl -k \
    $CURL_VERBOSE \
    -w '%{http_code}' \
    -o $output \
    -H "Authorization: Bearer $PINGDOM_TOKEN" \
    -H "Accept: application/json" \
    "$@" \
    $PINGDOM$path)
  then
    fail "\Failed to request $path: $status"
  fi
  cat $output
  if [[ $status != 2?? ]]
  then
    fail "\nFailed to request $path: $status"
  fi
}

getChecks() {
  curlPingdom /checks
}

getCheck() {
  local checkId="$1"
  if [ -z "${checkId}" ]; then usage "Check ID not specified"; fi
  if [[ "${checkId}" =~ [a-zA-Z]+ ]]
  then
    checkId=$(getExistingCheckIdForName $checkId)
    if [ -z "${checkId}" ]; then usage "Check not found for name: $1"; fi
  fi
  curlPingdom /checks/$checkId
}

processTemplate() {
  templateOrDie
  local output="$1" # could be /dev/stdout
  local workInProgress=$(mktemp -p $WORK_DIR)
  local templateFile=$TEMPLATE_DIR/$TEMPLATE_NAME.json
  if [ ! -f "$templateFile" ]; then usage "Template not found"; fi
  if isDebug; then cat $templateFile; fi
  cp $templateFile $workInProgress
  local requiredTemplateArgs=$(grep -oE '\$[-a-zA-Z0-0_]+' $templateFile|tr -d \$)
  local missingArguments=false
  for arg in $requiredTemplateArgs
  do
    local value="${TEMPLATE_ARGS[$arg]:-}"
    if [ -z "$value" ]
    then
      missingArguments=true
      echo "Missing template argument: $arg"
    else
      # protect sed sensitive characters
      local escapedArgs="${value}"
      escapedArgs="${escapedArgs//\\/\\\\}"
      escapedArgs="${escapedArgs//&/\\&}"
      escapedArgs="${escapedArgs//${SED_SEPARATOR}/\\${SED_SEPARATOR}}"
      sed -i "s${SED_SEPARATOR}\\\$$arg${SED_SEPARATOR}${escapedArgs}${SED_SEPARATOR}g" $workInProgress
    fi
  done
  if [ $missingArguments == true ]; then fail "Missing parameters for template: $TEMPLATE_NAME"; fi
  if isDebug; then cat $workInProgress; fi
  if ! jq . $workInProgress > $WORK_DIR/template-errors 2>&1
  then
    cat $WORK_DIR/template-errors
    echo "Processed template is invalid. See $workInProgress"
    return 1
  fi
  cat $workInProgress > $output
}


getExistingCheckIdForName() {
  local name="$1"
  getChecks | jq -r ".checks[]|select(.name==\"$name\")|.id"
}

removeType() {
  local output="$1"
  sed -i '/^ \+"type":/d' $output
}

saveCheck() {
  local output=$(mktemp -p $WORK_DIR check.XXXXX)
  processTemplate $output
  # All checks must have a name.
  local name="$(jq -r .name $output)"
  if [ -z "$name" ]; then fail "Check $TEMPLATE_NAME is missing a name."; fi
  echo "Looking for existing $name check..."
  local id=$(getExistingCheckIdForName $name)
  if [ -n "$id" ]
  then
    echo "Updating check $name ($id)";
    removeType $output
    if isDebug; then cat $output; fi
    curlPingdom /checks/$id -X PUT -d @$output -H "Content-Type: application/json"
  else
    echo "Creating check $name"
    if isDebug; then cat $output; fi
    curlPingdom /checks -X POST -d @$output -H "Content-Type: application/json"
  fi
  printf "\n\n"
}

#============================================================
if isDebug; then set -x; CURL_VERBOSE=-v; fi
initialize
processCommandLine "$@"

